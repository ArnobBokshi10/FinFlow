// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  transactions  Transaction[]
  categories    Category[]
  ownedGroups   Group[]         @relation("GroupOwner")
  groupMembers  GroupMember[]
  aiInsights    AIInsight[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  id           String        @id @default(cuid())
  name         String
  balance      Float         @default(0)
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([userId])
}

model Category {
  id           String        @id @default(cuid())
  name         String
  icon         String        @default("tag")
  color        String        @default("#000000")
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([name, userId])
  @@index([userId])
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Float
  description String
  date        DateTime
  type        String   @default("EXPENSE")
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId   String
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([categoryId])
  @@index([accountId])
  @@index([date])
}

model Group {
  id           String            @id @default(cuid())
  name         String
  description  String?
  ownerId      String
  owner        User              @relation("GroupOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members      GroupMember[]
  transactions GroupTransaction[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@index([ownerId])
}

model GroupMember {
  id       String   @id @default(cuid())
  groupId  String
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  joinedAt DateTime @default(now())

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
}

model GroupTransaction {
  id          String   @id @default(cuid())
  groupId     String
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  amount      Float
  description String
  date        DateTime
  payerId     String
  splitDetails Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([groupId])
}

model AIInsight {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  month     String
  year      Int
  content   String
  createdAt DateTime @default(now())

  @@unique([userId, month, year])
  @@index([userId])
}